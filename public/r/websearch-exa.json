{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "websearch-exa",
  "type": "registry:component",
  "title": "Web Search (EXA)",
  "author": "Nicklas Scharpff <https://n1cklas.com>",
  "description": "Web search via EXA API (requires EXA_API_KEY). Shares renderer.",
  "dependencies": ["zod", "ai"],
  "registryDependencies": ["https://ai-tools-registry.vercel.app/r/card.json"],
  "files": [
    {
      "path": "registry/ai-tools/tools/websearch/websearch-exa-tool.ts",
      "content": "import { UIToolInvocation, tool } from \"ai\"\nimport { z } from \"zod\"\n\nimport { WebSearchSchema, WebSearchItem } from \"./schema\"\n\nconst ExaSearchHitSchema = z\n  .object({\n    title: z.string().optional(),\n    url: z.string().url().optional(),\n    text: z.string().optional(),\n    snippet: z.string().optional(),\n  })\n  .passthrough()\n\nconst ExaSearchResponseSchema = z\n  .object({\n    results: z.array(ExaSearchHitSchema).optional(),\n  })\n  .passthrough()\n\nexport const webSearchExaTool = tool({\n  name: \"websearch-exa\",\n  description:\n    \"Search the web using EXA Search API. Requires EXA_API_KEY. See https://docs.exa.ai/reference/getting-started\",\n  inputSchema: z.object({\n    query: z.string().min(1),\n    limit: z.number().min(1).max(20).default(5),\n  }),\n  outputSchema: WebSearchSchema,\n  execute: async ({ query, limit }) => {\n    const apiKey = process.env.EXA_API_KEY\n    if (!apiKey) {\n      throw new Error(\n        \"EXA_API_KEY is required to use the EXA websearch provider\"\n      )\n    }\n\n    const res = await fetch(\"https://api.exa.ai/search\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query,\n        numResults: limit,\n      }),\n    })\n\n    if (!res.ok) throw new Error(`EXA API failed: ${res.status}`)\n    const data = ExaSearchResponseSchema.parse(await res.json())\n\n    const results: WebSearchItem[] = (data.results || [])\n      .slice(0, limit)\n      .map((r) => {\n        const url = r.url || \"\"\n        let source: string | undefined\n        try {\n          source = url ? new URL(url).hostname : undefined\n        } catch {\n          source = undefined\n        }\n        return {\n          title: r.title || url || \"Untitled\",\n          url,\n          snippet: r.snippet || r.text || undefined,\n          source,\n        }\n      })\n      .filter((r) => !!r.url)\n\n    return { query, results }\n  },\n})\n\nexport default webSearchExaTool\n\nexport type WebSearchToolType = UIToolInvocation<typeof webSearchExaTool>\n",
      "type": "registry:file",
      "target": "~/ai/tools/websearch/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/websearch/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { WebSearchItem } from \"./schema\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/ai-tools/ui/card\"\nimport type { WebSearchToolType } from \"./tool\"\n\nexport function WebSearchList(part: WebSearchToolType) {\n  if (part.output === undefined) return <div>Invalid tool type</div>\n  const { query, results } = part.output\n  return (\n    <Card className=\"w-full max-w-xl\">\n      <CardHeader>\n        <CardTitle>Web Search</CardTitle>\n        <CardDescription>Query: {query}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ul className=\"space-y-3\">\n          {results.map((r: WebSearchItem) => (\n            <li key={r.url} className=\"rounded-md bg-muted p-3\">\n              <a\n                href={r.url}\n                className=\"font-medium hover:underline\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {r.title}\n              </a>\n              {r.source ? (\n                <span className=\"ml-2 text-xs text-muted-foreground\">\n                  ({r.source})\n                </span>\n              ) : null}\n              {r.snippet ? (\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {r.snippet}\n                </div>\n              ) : null}\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default WebSearchList\n",
      "type": "registry:file",
      "target": "~/ai/tools/websearch/component.tsx"
    },
    {
      "path": "registry/ai-tools/tools/websearch/schema.ts",
      "content": "import { z } from \"zod\"\n\nexport const WebSearchItemSchema = z.object({\n  title: z.string(),\n  url: z.string().url(),\n  snippet: z.string().optional(),\n  source: z.string().optional(),\n})\n\nexport const WebSearchSchema = z.object({\n  query: z.string(),\n  results: z.array(WebSearchItemSchema),\n})\n\nexport type WebSearchItem = z.infer<typeof WebSearchItemSchema>\nexport type WebSearchResult = z.infer<typeof WebSearchSchema>\n",
      "type": "registry:file",
      "target": "~/ai/tools/websearch/schema.ts"
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\n        \"leading-none tracking-tight text-lg font-semibold\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/tools/websearch/tool.ts",
      "content": "import { UIToolInvocation, tool } from \"ai\"\nimport { z } from \"zod\"\n\nexport const WebSearchItemSchema = z.object({\n  title: z.string(),\n  url: z.string().url(),\n  snippet: z.string().optional(),\n  source: z.string().optional(),\n})\n\nexport const WebSearchSchema = z.object({\n  query: z.string(),\n  results: z.array(WebSearchItemSchema),\n})\n\nexport type WebSearchItem = z.infer<typeof WebSearchItemSchema>\nexport type WebSearchResult = z.infer<typeof WebSearchSchema>\n\nexport const webSearchTool = tool({\n  name: \"websearch\",\n  description: \"Search the web and return relevant results.\",\n  inputSchema: z.object({\n    query: z.string().min(1),\n    limit: z.number().min(1).max(20).default(5),\n    lang: z.string().optional(),\n    country: z.string().optional(),\n  }),\n  outputSchema: WebSearchSchema,\n  execute: async ({ query, limit, lang, country }) => {\n    const results: WebSearchItem[] = []\n    return { query, results }\n  },\n})\n\nexport default webSearchTool\n\nexport type WebSearchToolType = UIToolInvocation<typeof webSearchTool>\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
