{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stats",
  "type": "registry:component",
  "title": "Public Stats",
  "author": "Nicklas Scharpff <https://n1cklas.com>",
  "description": "AI SDK tool that fetches global earthquake counts from USGS and renders a chart.",
  "dependencies": ["zod", "ai", "recharts"],
  "registryDependencies": ["@ai-tools/card", "@ai-tools/chart"],
  "files": [
    {
      "path": "registry/ai-tools/tools/stats/tool.ts",
      "content": "import { tool } from \"ai\"\nimport { z } from \"zod\"\n\n// Fetch global earthquake counts (per day) from USGS for the last N days\nexport const StatsSeriesPointSchema = z.object({\n  date: z.string(),\n  count: z.number(),\n})\n\nexport const PublicStatsSchema = z.object({\n  title: z.string(),\n  series: z.array(StatsSeriesPointSchema),\n})\n\nexport type StatsSeriesPoint = z.infer<typeof StatsSeriesPointSchema>\nexport type PublicStatsResult = z.infer<typeof PublicStatsSchema>\n\nexport const publicStatsTool = tool({\n  name: \"stats\",\n  description:\n    \"Fetch daily counts of global earthquakes from USGS for the last N days.\",\n  inputSchema: z.object({\n    daysBack: z\n      .number()\n      .int()\n      .min(1)\n      .max(365)\n      .default(30)\n      .describe(\"How many days back from today (UTC) to include\"),\n    minMagnitude: z\n      .number()\n      .min(0)\n      .max(10)\n      .default(5)\n      .describe(\"Minimum magnitude to include\"),\n  }),\n  outputSchema: PublicStatsSchema,\n  execute: async ({ daysBack, minMagnitude }): Promise<PublicStatsResult> => {\n    const end = new Date()\n    const start = new Date(end.getTime() - daysBack * 24 * 60 * 60 * 1000)\n\n    const fmt = (d: Date) => d.toISOString().slice(0, 10)\n\n    const params = new URLSearchParams({\n      format: \"geojson\",\n      starttime: fmt(start),\n      endtime: fmt(end),\n      minmagnitude: String(minMagnitude),\n    })\n    const url = `https://earthquake.usgs.gov/fdsnws/event/1/query?${params.toString()}`\n    const res = await fetch(url)\n    if (!res.ok) throw new Error(`USGS API failed: ${res.status}`)\n    const data = (await res.json()) as {\n      features?: Array<{ properties?: { time?: number } }>\n    }\n\n    const counts = new Map<string, number>()\n    for (const f of data.features ?? []) {\n      const t = f?.properties?.time\n      if (!Number.isFinite(t)) continue\n      const day = new Date(Number(t)).toISOString().slice(0, 10)\n      counts.set(day, (counts.get(day) || 0) + 1)\n    }\n\n    const series: StatsSeriesPoint[] = []\n    for (let i = daysBack; i >= 0; i--) {\n      const d = new Date(end.getTime() - i * 24 * 60 * 60 * 1000)\n      const day = d.toISOString().slice(0, 10)\n      series.push({ date: day, count: counts.get(day) || 0 })\n    }\n\n    return { title: `Global M${minMagnitude}+ earthquakes`, series }\n  },\n})\n\nexport default publicStatsTool\n",
      "type": "registry:file",
      "target": "~/ai/tools/stats/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/stats/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { PublicStatsResult, StatsSeriesPoint } from \"./tool\"\nimport { ToolUIPart } from \"ai\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/ai-tools/ui/card\"\nimport {\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@/registry/ai-tools/ui/chart\"\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis } from \"recharts\"\nimport type { TooltipContentProps } from \"recharts/types/component/Tooltip\"\nimport type {\n  NameType,\n  ValueType,\n} from \"recharts/types/component/DefaultTooltipContent\"\nimport type { Props as DefaultLegendContentProps } from \"recharts/types/component/DefaultLegendContent\"\n\nexport function StatsChart(part: ToolUIPart) {\n  // This component can render with provided data or fetch live if none.\n  // When used as a Tool UI part, expect part.type and output present.\n  const data =\n    part.type === \"tool-stats\"\n      ? (part.output as PublicStatsResult | null)\n      : undefined\n  const config: ChartConfig = {\n    // Use design system chart color for higher contrast in both themes\n    count: { label: \"Quakes\", color: \"var(--border)\" },\n  }\n\n  const [live, setLive] = React.useState<PublicStatsResult | null>(null)\n  React.useEffect(() => {\n    if (data) return\n    const controller = new AbortController()\n    const fetchLive = async () => {\n      try {\n        const end = new Date()\n        const start = new Date(end.getTime() - 30 * 24 * 60 * 60 * 1000)\n        const fmt = (d: Date) => d.toISOString().slice(0, 10)\n        const params = new URLSearchParams({\n          format: \"geojson\",\n          starttime: fmt(start),\n          endtime: fmt(end),\n          minmagnitude: String(5),\n        })\n        const res = await fetch(\n          `https://earthquake.usgs.gov/fdsnws/event/1/query?${params.toString()}`,\n          { signal: controller.signal }\n        )\n        if (!res.ok) throw new Error(\"USGS fetch failed\")\n        const json = (await res.json()) as {\n          features?: Array<{ properties?: { time?: number } }>\n        }\n        const counts = new Map<string, number>()\n        for (const f of json.features ?? []) {\n          const t = f?.properties?.time\n          if (!Number.isFinite(t)) continue\n          const day = new Date(Number(t)).toISOString().slice(0, 10)\n          counts.set(day, (counts.get(day) || 0) + 1)\n        }\n        const series: PublicStatsResult[\"series\"] = []\n        for (let i = 30; i >= 0; i--) {\n          const d = new Date(end.getTime() - i * 24 * 60 * 60 * 1000)\n          const day = d.toISOString().slice(0, 10)\n          series.push({ date: day, count: counts.get(day) || 0 })\n        }\n        setLive({ title: \"Global M5+ earthquakes\", series })\n      } catch {\n        // swallow for demo; component will render nothing\n      }\n    }\n    fetchLive()\n    return () => controller.abort()\n  }, [data])\n\n  const source = data ?? live\n  const chartData =\n    source?.series.map((d: StatsSeriesPoint) => ({\n      date: d.date,\n      count: d.count,\n    })) ?? []\n\n  return (\n    <Card className=\"w-full max-w-3xl\">\n      <CardHeader>\n        <CardTitle>{source?.title ?? \"Public Stats\"}</CardTitle>\n        <CardDescription>Source: USGS Earthquake Catalog</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={config} className=\"aspect-auto h-[300px]\">\n          <AreaChart\n            data={chartData}\n            margin={{ left: 8, right: 8, top: 8, bottom: 8 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} tickMargin={8} />\n            <YAxis\n              tickFormatter={(v) =>\n                Intl.NumberFormat(undefined, { notation: \"compact\" }).format(\n                  Number(v)\n                )\n              }\n              tick={{ fontSize: 12 }}\n              tickMargin={8}\n            />\n            <ChartTooltip\n              content={(props: TooltipContentProps<ValueType, NameType>) => (\n                <ChartTooltipContent {...props} />\n              )}\n            />\n            <ChartLegend\n              verticalAlign=\"top\"\n              content={(props: DefaultLegendContentProps) => (\n                <ChartLegendContent\n                  verticalAlign=\"top\"\n                  payload={props.payload}\n                />\n              )}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"count\"\n              stroke=\"var(--color-count)\"\n              fill=\"var(--color-count)\"\n              fillOpacity={0.2}\n              name=\"Quakes\"\n              dot={{\n                r: 2,\n                stroke: \"var(--color-count)\",\n                fill: \"var(--color-count)\",\n              }}\n              activeDot={{ r: 3 }}\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default StatsChart\n",
      "type": "registry:file",
      "target": "~/ai/tools/stats/component.tsx"
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\n        \"leading-none tracking-tight text-lg font-semibold\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/chart.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\nimport type { LegendPayload } from \"recharts/types/component/DefaultLegendContent\"\nimport {\n  NameType,\n  Payload,\n  ValueType,\n} from \"recharts/types/component/DefaultTooltipContent\"\nimport type { Props as LegendProps } from \"recharts/types/component/Legend\"\nimport { TooltipContentProps } from \"recharts/types/component/Tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nexport type CustomTooltipProps = TooltipContentProps<ValueType, NameType> & {\n  className?: string\n  hideLabel?: boolean\n  hideIndicator?: boolean\n  indicator?: \"line\" | \"dot\" | \"dashed\"\n  nameKey?: string\n  labelKey?: string\n  labelFormatter?: (\n    label: TooltipContentProps<number, string>[\"label\"],\n    payload: TooltipContentProps<number, string>[\"payload\"]\n  ) => React.ReactNode\n  formatter?: (\n    value: number | string,\n    name: string,\n    item: Payload<number | string, string>,\n    index: number,\n    payload: ReadonlyArray<Payload<number | string, string>>\n  ) => React.ReactNode\n  labelClassName?: string\n  color?: string\n}\n\nexport type ChartLegendContentProps = {\n  className?: string\n  hideIcon?: boolean\n  verticalAlign?: LegendProps[\"verticalAlign\"]\n  payload?: ReadonlyArray<LegendPayload>\n  nameKey?: string\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n            ${prefix} [data-chart=${id}] {\n            ${colorConfig\n              .map(([key, itemConfig]) => {\n                const color =\n                  itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n                  itemConfig.color\n                return color ? `  --color-${key}: ${color};` : null\n              })\n              .join(\"\\n\")}\n            }\n            `\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  label,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  labelFormatter,\n  formatter,\n  labelClassName,\n  color,\n  nameKey,\n  labelKey,\n}: CustomTooltipProps) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value = (() => {\n      const v =\n        !labelKey && typeof label === \"string\"\n          ? (config[label as keyof typeof config]?.label ?? label)\n          : itemConfig?.label\n\n      return typeof v === \"string\" || typeof v === \"number\" ? v : undefined\n    })()\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: ChartLegendContentProps) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
