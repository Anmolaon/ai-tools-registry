{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:component",
  "title": "Code Block",
  "description": "Code block with copy support and theme-aware highlighting.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "react-syntax-highlighter"
  ],
  "files": [
    {
      "path": "registry/ai-elements/code-block.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/registry/ai-tools/ui/button\"\nimport { cn } from \"@/lib/utils\"\nimport { CheckIcon, CopyIcon } from \"lucide-react\"\nimport type { ComponentProps, HTMLAttributes, ReactNode } from \"react\"\nimport { createContext, useContext, useState } from \"react\"\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\"\nimport {\n  oneDark,\n  oneLight,\n} from \"react-syntax-highlighter/dist/esm/styles/prism\"\n\ntype CodeBlockContextType = {\n  code: string\n}\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  code: \"\",\n})\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  code: string\n  language: string\n  showLineNumbers?: boolean\n  children?: ReactNode\n}\n\nexport const CodeBlock = ({\n  code,\n  language,\n  showLineNumbers = false,\n  className,\n  children,\n  ...props\n}: CodeBlockProps) => (\n  <CodeBlockContext.Provider value={{ code }}>\n    <div\n      className={cn(\n        \"relative w-full overflow-hidden rounded-md border bg-background text-foreground\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"relative\">\n        <SyntaxHighlighter\n          className=\"overflow-hidden dark:hidden\"\n          codeTagProps={{\n            className: \"font-mono text-sm\",\n          }}\n          customStyle={{\n            margin: 0,\n            padding: \"1rem\",\n            fontSize: \"0.875rem\",\n            background: \"hsl(var(--background))\",\n            color: \"hsl(var(--foreground))\",\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: \"hsl(var(--muted-foreground))\",\n            paddingRight: \"1rem\",\n            minWidth: \"2.5rem\",\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneLight}\n        >\n          {code}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter\n          className=\"hidden overflow-hidden dark:block\"\n          codeTagProps={{\n            className: \"font-mono text-sm\",\n          }}\n          customStyle={{\n            margin: 0,\n            padding: \"1rem\",\n            fontSize: \"0.875rem\",\n            background: \"hsl(var(--background))\",\n            color: \"hsl(var(--foreground))\",\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: \"hsl(var(--muted-foreground))\",\n            paddingRight: \"1rem\",\n            minWidth: \"2.5rem\",\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneDark}\n        >\n          {code}\n        </SyntaxHighlighter>\n        {children && (\n          <div className=\"absolute top-2 right-2 flex items-center gap-2\">\n            {children}\n          </div>\n        )}\n      </div>\n    </div>\n  </CodeBlockContext.Provider>\n)\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void\n  onError?: (error: Error) => void\n  timeout?: number\n}\n\nexport const CodeBlockCopyButton = ({\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false)\n  const { code } = useContext(CodeBlockContext)\n\n  const copyToClipboard = async () => {\n    if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n      onError?.(new Error(\"Clipboard API not available\"))\n      return\n    }\n\n    try {\n      await navigator.clipboard.writeText(code)\n      setIsCopied(true)\n      onCopy?.()\n      setTimeout(() => setIsCopied(false), timeout)\n    } catch (error) {\n      onError?.(error as Error)\n    }\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon\n\n  return (\n    <Button\n      className={cn(\"shrink-0\", className)}\n      onClick={copyToClipboard}\n      size=\"icon\"\n      variant=\"ghost\"\n      {...props}\n    >\n      {children ?? <Icon size={14} />}\n    </Button>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/ai-tools/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
