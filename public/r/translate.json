{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "translate",
  "type": "registry:component",
  "title": "Translate",
  "description": "Translate a string to a target language (mock).",
  "dependencies": ["ai", "zod"],
  "files": [
    {
      "path": "registry/ai-tools/tools/translate/tool.ts",
      "content": "import { tool } from \"ai\"\nimport { z } from \"zod\"\n\nexport const translateTool = tool({\n  description: \"Translate a given text into a target language.\",\n  inputSchema: z.object({\n    text: z.string().min(1),\n    targetLanguage: z\n      .string()\n      .default(\"en\")\n      .describe(\"Target language code e.g. es, fr, de\"),\n    sourceLanguage: z\n      .string()\n      .default(\"en\")\n      .describe(\"Source language code e.g. en, fr, de\"),\n  }),\n  execute: async ({ text, targetLanguage, sourceLanguage }) => {\n    // Use MyMemory Translation API (free, no key). Requires explicit langpair.\n    const url = `https://api.mymemory.translated.net/get?${new URLSearchParams({\n      q: text,\n      langpair: `${sourceLanguage}|${targetLanguage}`,\n    }).toString()}`\n\n    const res = await fetch(url)\n    if (!res.ok) throw new Error(`Translate API failed: ${res.status}`)\n    const data = (await res.json()) as MyMemoryResponse\n    const translated = data?.responseData?.translatedText || text\n    return { text, targetLanguage, translated }\n  },\n})\n\nexport interface TranslateResult {\n  text: string\n  targetLanguage: string\n  translated: string\n}\n\n// MyMemory response type\ninterface MyMemoryResponse {\n  responseData: { translatedText: string; match?: number }\n  responseStatus: number\n  matches?: unknown[]\n}\n\nexport default translateTool\n",
      "type": "registry:file",
      "target": "~/ai/tools/translate/tool.ts"
    }
  ]
}
