{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "weather",
  "type": "registry:component",
  "title": "Get Weather",
  "author": "Nicklas Scharpff <https://n1cklas.com>",
  "description": "AI SDK tool that returns mock weather for a location. Includes a WeatherCard renderer.",
  "dependencies": ["ai", "zod"],
  "registryDependencies": ["@ai-tools/card"],
  "files": [
    {
      "path": "registry/ai-tools/tools/weather/tool.ts",
      "content": "import { tool } from \"ai\"\nimport { z } from \"zod\"\n\n// Tool definition first\nexport const GetWeatherSchema = z.object({\n  location: z.string(),\n  unit: z.enum([\"C\", \"F\"]),\n  temperature: z.number(),\n  condition: z.string(),\n  high: z.number(),\n  low: z.number(),\n  humidity: z.number(),\n  windKph: z.number(),\n  icon: z.string().optional(),\n})\n\nexport type GetWeatherResult = z.infer<typeof GetWeatherSchema>\n\n// Tool definition first\nexport const getWeatherTool = tool({\n  name: \"weather\",\n  description: \"Get the current weather for a location.\",\n  inputSchema: z.object({\n    location: z.string().describe(\"City name, address or coordinates\"),\n    unit: z.enum([\"C\", \"F\"]).default(\"C\"),\n  }),\n  outputSchema: GetWeatherSchema,\n  execute: async ({ location, unit }) => {\n    const { latitude, longitude, name } = await geocodeLocation(location)\n\n    const params = new URLSearchParams({\n      latitude: String(latitude),\n      longitude: String(longitude),\n      current: [\n        \"temperature_2m\",\n        \"relative_humidity_2m\",\n        \"wind_speed_10m\",\n        \"weather_code\",\n      ].join(\",\"),\n      daily: [\"temperature_2m_max\", \"temperature_2m_min\"].join(\",\"),\n      timezone: \"auto\",\n      temperature_unit: unit === \"F\" ? \"fahrenheit\" : \"celsius\",\n      wind_speed_unit: \"kmh\",\n    })\n\n    const url = `https://api.open-meteo.com/v1/forecast?${params.toString()}`\n    const res = await fetch(url)\n    if (!res.ok) throw new Error(`Weather API failed: ${res.status}`)\n    const data = (await res.json()) as ForecastResponse\n\n    const current = data?.current\n    const daily = data?.daily\n    if (!current || !daily) throw new Error(\"Malformed weather API response\")\n\n    const weatherCode = Number(current.weather_code)\n    const mapped = mapWeatherCode(weatherCode)\n\n    const result: GetWeatherResult = {\n      location: name,\n      unit,\n      temperature: Math.round(Number(current.temperature_2m)),\n      condition: mapped.condition,\n      high: Math.round(Number(daily.temperature_2m_max?.[0])),\n      low: Math.round(Number(daily.temperature_2m_min?.[0])),\n      humidity: Math.max(\n        0,\n        Math.min(1, Number(current.relative_humidity_2m) / 100)\n      ),\n      windKph: Math.round(Number(current.wind_speed_10m)),\n      icon: mapped.icon,\n    }\n\n    return result\n  },\n})\n\n// API response types (from Open-Meteo)\ninterface GeocodeItem {\n  id: number\n  name: string\n  latitude: number\n  longitude: number\n  elevation?: number\n  country_code?: string\n  admin1?: string\n  timezone?: string\n}\n\ninterface GeocodeResponse {\n  results?: GeocodeItem[]\n}\n\ninterface ForecastCurrent {\n  time: string\n  interval: number\n  temperature_2m: number\n  relative_humidity_2m: number\n  wind_speed_10m: number\n  weather_code: number\n}\n\ninterface ForecastDaily {\n  time: string[]\n  temperature_2m_max: number[]\n  temperature_2m_min: number[]\n}\n\ninterface ForecastResponse {\n  current: ForecastCurrent\n  daily: ForecastDaily\n}\n\n// Helper functions (hoisted)\nasync function geocodeLocation(location: string): Promise<{\n  latitude: number\n  longitude: number\n  name: string\n}> {\n  // Allow \"lat,lon\" inputs without geocoding\n  const coordMatch = location\n    .trim()\n    .match(/^\\s*(-?\\d+(?:\\.\\d+)?)\\s*,\\s*(-?\\d+(?:\\.\\d+)?)\\s*$/)\n  if (coordMatch) {\n    const latitude = parseFloat(coordMatch[1])\n    const longitude = parseFloat(coordMatch[2])\n    return {\n      latitude,\n      longitude,\n      name: `${latitude.toFixed(3)}, ${longitude.toFixed(3)}`,\n    }\n  }\n\n  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(\n    location\n  )}&count=1&language=en&format=json`\n  const res = await fetch(url)\n  if (!res.ok) throw new Error(`Geocoding failed: ${res.status}`)\n  const data = (await res.json()) as GeocodeResponse\n  const first = data?.results?.[0]\n  if (!first) throw new Error(`Location not found: ${location}`)\n  const nameParts = [first.name, first.admin1, first.country_code].filter(\n    Boolean\n  )\n  return {\n    latitude: first.latitude,\n    longitude: first.longitude,\n    name: nameParts.join(\", \"),\n  }\n}\n\nfunction mapWeatherCode(code: number): { condition: string; icon?: string } {\n  switch (code) {\n    case 0:\n      return { condition: \"Clear sky\", icon: \"weather-sun\" }\n    case 1:\n      return { condition: \"Mainly clear\", icon: \"weather-sun\" }\n    case 2:\n      return { condition: \"Partly cloudy\", icon: \"weather-partly\" }\n    case 3:\n      return { condition: \"Overcast\", icon: \"weather-cloud\" }\n    case 45:\n    case 48:\n      return { condition: \"Fog\", icon: \"weather-fog\" }\n    case 51:\n    case 53:\n    case 55:\n    case 56:\n    case 57:\n      return { condition: \"Drizzle\", icon: \"weather-drizzle\" }\n    case 61:\n    case 63:\n    case 65:\n    case 66:\n    case 67:\n      return { condition: \"Rain\", icon: \"weather-rain\" }\n    case 71:\n    case 73:\n    case 75:\n    case 77:\n      return { condition: \"Snow\", icon: \"weather-snow\" }\n    case 80:\n    case 81:\n    case 82:\n      return { condition: \"Showers\", icon: \"weather-showers\" }\n    case 85:\n    case 86:\n      return { condition: \"Snow showers\", icon: \"weather-snow\" }\n    case 95:\n    case 96:\n    case 99:\n      return { condition: \"Thunderstorm\", icon: \"weather-thunder\" }\n    default:\n      return { condition: \"Unknown\" }\n  }\n}\n\nexport default getWeatherTool\n",
      "type": "registry:file",
      "target": "~/ai/tools/weather/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/weather/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { ToolUIPart } from \"ai\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/ai-tools/ui/card\"\nimport { GetWeatherResult } from \"./tool\"\n\nexport function WeatherCard(part: ToolUIPart) {\n  if (part.type !== \"tool-weather\") return <div>Invalid tool type</div>\n  if (part.state === \"output-error\") {\n    return <div>Error: {part.errorText || \"Unknown error\"}</div>\n  }\n  if (part.state !== \"output-available\") {\n    return (\n      <Card className=\"w-full max-w-lg\">\n        <CardHeader>\n          <CardTitle>Weather</CardTitle>\n          <CardDescription>Loading...</CardDescription>\n        </CardHeader>\n      </Card>\n    )\n  }\n  const {\n    location,\n    temperature,\n    unit,\n    condition,\n    high,\n    low,\n    humidity,\n    windKph,\n  } = part.output as GetWeatherResult\n  return (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader>\n        <CardTitle>Weather</CardTitle>\n        <CardDescription>Powered by your tool</CardDescription>\n      </CardHeader>\n      <CardContent className=\"pb-6\">\n        <div className=\"text-lg font-semibold mb-1\">{location}</div>\n        <div className=\"flex items-baseline gap-3\">\n          <div className=\"text-5xl font-bold\">\n            {temperature}°{unit}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">{condition}</div>\n        </div>\n        <div className=\"mt-4 grid grid-cols-3 gap-3 text-sm\">\n          <div className=\"rounded-md bg-muted p-3 text-center\">\n            <div className=\"text-muted-foreground\">High</div>\n            <div className=\"font-medium\">\n              {high}°{unit}\n            </div>\n          </div>\n          <div className=\"rounded-md bg-muted p-3 text-center\">\n            <div className=\"text-muted-foreground\">Low</div>\n            <div className=\"font-medium\">\n              {low}°{unit}\n            </div>\n          </div>\n          <div className=\"rounded-md bg-muted p-3 text-center\">\n            <div className=\"text-muted-foreground\">Humidity</div>\n            <div className=\"font-medium\">{Math.round(humidity * 100)}%</div>\n          </div>\n        </div>\n        <div className=\"mt-3 text-sm text-muted-foreground\">\n          Wind: {windKph} kph\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default WeatherCard\n",
      "type": "registry:file",
      "target": "~/ai/tools/weather/component.tsx"
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\n        \"leading-none tracking-tight text-lg font-semibold\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
